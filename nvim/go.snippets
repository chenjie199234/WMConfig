# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet main "func main(){}" b
package main

import (
	${1}
)

func main() {
	${2}
}
endsnippet

snippet i "interface{}" b
interface{}
endsnippet

snippet s "struct{}" b
struct {
	${1}
}
endsnippet

snippet v "var" b
var ${1} ${2} = ${3}
endsnippet

snippet vs "var multi" b
var (
	${1} ${2} = ${3}
)
endsnippet

snippet ts "type struct" b
type ${1} struct {
	${2}
}
endsnippet

snippet ti "type interface" b
type ${1} interface {
	${2}
}
endsnippet

snippet pk "package" b
package ${1}
endsnippet

snippet im "import" b
import "${1}"
endsnippet

snippet ims "import multi" b
import (
	"${1}"
)
endsnippet

snippet for "for {}" b
for ${1} {
	${2}
}
endsnippet
snippet fori "for i:=;i<;i++{}" b
for i:=${1};i<${2};i++{
	${3}
}
endsnippet
snippet fors "for {select{}}" b
for {
	select {
		${1}
	}
}
endsnippet

snippet fn "func xxx(){}" b
func ${1}(${2})${3}{
	${4}
}
endsnippet
snippet func "func xxx(){}" b
func ${1}(${2})${3}{
	${4}
}
endsnippet

snippet if "if {}" b
if ${1} {
	${2}
}
endsnippet
snippet ife "if e:=xxx();e!=nil{}" b
if e := ${1}; e != nil {
	${2}
}
endsnippet

snippet sw "switch case" b
switch ${1} {
case ${2}:
	${4}
case ${3}:
	${5}
}
endsnippet
snippet switch "switch case" b
switch ${1}{
case ${2}:
	${4}
case ${3}:
	${5}
}
endsnippet

snippet df "defer func(){}()" b
defer func() {
	${1}
}()
endsnippet

snippet rcv "recover()" b
defer func() {
	if e := recover(); e != nil {
		${1}
	}
}()
endsnippet

snippet gf "go func(){}" b
go func() {
	${1}
}()
endsnippet
